AsciiTokensToJava.Usage_Syntax=usage: TokensToJava <input-name> <output-name> <token-category-class-name> <token-type-class-name>
AsciiTokensToJava.Usage_Input_Name=\ \ <input-name> is the full path to the lexer grammar
AsciiTokensToJava.Usage_Output_Name=\ \ <output-name> is the full path to the generate btl file
AsciiTokensToJava.Usage_Token_Type_Class_Name=\ \ <token-type-class-name> is the full path to the token type enumeration
AsciiTokensToJava.Input_File_Does_Not_Exist=input file does not exist: 
AsciiTokensToJava.Processing_Lexer_Grammar=Processing lexer grammar from 
AsciiTokensToJava.Finished=Finished. Don't forget to refresh
AsciiTokensToJava.Outputting_Binary_File=Outputting binary token list...
AsciiTokensToJava.Cannot_Write_File=Cannot write {0} because it is read-only
GenerateAllBinaries.Generation_Complete=generation complete
MetadataToBinary.Usage_Syntax=usage: MetadataToBinary <input-file> <output-file>
MetadataToBinary.Usage_Input_File=\ \ input-file is the full path to the metadata XML file.
MetadataToBinary.Usage_Output_File=\ \ output-file is the full path to the file to be created.
MetadataToBinary.Input_File_Does_Not_Exist=input file does not exist: 
MetadataToBinary.Reading_Metadata=Reading metadata from 
MetadataToBinary.Finished=Finished. Don't forget to refresh
MetadataToBinary.Cannot_Write_File=Cannot write {0} because it is read-only
ScriptDocToBinary.Usage_Syntax=usage: ScriptDocToBinary <input-file> <output-file>
ScriptDocToBinary.Usage_Input_File=\ \ input-file is the full path to the metadata XML file.
ScriptDocToBinary.Usage_Output_File=\ \ output-file is the full path to the file to be created.
ScriptDocToBinary.Input_File_Does_Not_Exist=input file does not exist: 
ScriptDocToBinary.Reading_Documentation=Reading documentation from 
ScriptDocToBinary.Finished=Finished. Don't forget to refresh
ScriptDocToBinary.Cannot_Write_File=Cannot write {0} because it is read-only
UnicodeTokensToJava.Syntax_Usage=usage: TokensToJava <prefix> <input-name> <java-package> <output-name>
UnicodeTokensToJava.Usage_Base_Name=\ \ The base-name will be used to determine the lexer grammar name
UnicodeTokensToJava.Usage_Base_Name2=\ \ and the output class names. For example, if base-name equals
UnicodeTokensToJava.Usage_Base_Name3=\ \ 'JSToken', the grammar will be 'JSTokens.xml' and the class names
UnicodeTokensToJava.Usage_Base_Name4=\ \ will be 'JSTokenCategories' and 'JSTokenTypes'
UnicodeTokensToJava.Usage_Java_Package=\ \ The java-package is the name of the package in which to place the
UnicodeTokensToJava.Usage_Java_Package2=\ \ generated files.
UnicodeTokensToJava.Usage_Directory=\ \ The directory where the files will be output. The trailing slash
UnicodeTokensToJava.Usage_Directory2=\ \ is optional
UnicodeTokensToJava.Input_File_Does_Not_Exist=input file does not exist: {0}
UnicodeTokensToJava.Processing_Lexer_Grammar=Processing lexer grammar from  {0}
UnicodeTokensToJava.Finished=Finished. Don't forget to refresh
UnicodeTokensToJava.2=\ because it is read/only
UnicodeTokensToJava.Outputting_Token_Category_File=Outputting token category file...
UnicodeTokensToJava.Ouputting_Token_Type_File=Outputting token type file
UnicodeTokensToJava.Cannot_Write_File=Cannot write {0} because it is read-only
